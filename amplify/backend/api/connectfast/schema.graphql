
type Note @model
  @auth(rules: [{ allow: public, operations: [read] }])
  {
  id: ID!
  name: String!
  description: String
  image: String
}
  
type Products @model 
  @auth(rules: [{ allow: public, operations: [read] }])
  {
    id: ID!
    name: String!
    model: String
    description: String
    owner: String
    orders: [Order] @connection(keyName: "byProduct", fields: ["id"])
    inventories: [CurrentInventory] @connection(fields: ["id"])
}

type Company @model
  @auth(rules: [{ allow: public, operations: [read] }])
  {
    id: ID!
    name: String!
    country: String!
    city: String!
    street: String!
    url: AWSURL
    owner: String
  }

  
  type Order @model
   @key(name: "byCustomerByStatusByDate", fields: ["customerID", "status", "date"])
  @key(name: "byCustomerByDate", fields: ["customerID", "date"])
  @key(name: "byRepresentativebyDate", fields: ["accountRepresentativeID", "date"])
  @key(name: "byProduct", fields: ["productID", "id"])
   @auth(rules: [{ allow: public, operations: [read] }])
  {
    id: ID!
    customerID: ID!
    accountRepresentativeID: ID!
    productID: ID!
    status: String!
    amount: Int!
    date: String!
  }
  
  type Customer @model
  @key(name: "byRepresentative", fields: ["accountRepresentativeID", "id"])
  @auth(rules: [{ allow: public, operations: [read] }])
  {
    id: ID!
    name: String!
    phoneNumber: String! 
    accountRepresentativeID: ID!
    orderByDate: [Order] @connection(keyName: "byCustomerByDate", fields: ["id"])
    orderByStatusDate: [Order] @connection(keyName: "byCustomerByStatusByDate", fields: ["id"])
  }
   
type Employee @model
  @key(name: "newHire", fields: ["newHire", "id"], queryField: "employeesNewHire")
  @key(name: "newHireByStartDate", fields: ["newHire", "startDate"], queryField: "employeesNewHireByStartDate")
  @key(name: "byName", fields: ["name", "id"], queryField: "employeeByName")
  @key(name: "byTitle", fields: ["jobTitle", "id"], queryField: "employeesByJobTitle")
  @key(name: "byWarehouse", fields: ["warehouseID", "id"])
    @auth(rules: [{ allow: public, operations: [read] }])

{
  id: ID!
  name: String!
  startDate: String!
  phoneNumber: String!
  warehouseID: ID!
  jobTitle: String!
  newHire: String! # We have to use String type, because Boolean types cannot be sort keys
}

type Warehouse @model

  @auth(rules: [{ allow: public, operations: [read] }])
 {
  id: ID!
  companyID: ID!
  employees: [Employee] @connection(keyName: "byWarehouse", fields: ["id"])
}

type AccountRepresentative @model
  @key(name: "bySalesPeriodByOrderTotal", fields: ["salesPeriod", "orderTotal"], queryField: "repsByPeriodAndTotal")
@auth(rules: [{ allow: public, operations: [read] }])
{
  id: ID!
  customers: [Customer] @connection(keyName: "byRepresentative", fields: ["id"])
  orders: [Order] @connection(keyName: "byRepresentativebyDate", fields: ["id"])
  orderTotal: Int
  salesPeriod: String
}

type CurrentInventory @model
  @key(name: "byWarehouseID", fields: ["warehouseID"], queryField: "itemsByWarehouseID")
  @key(fields: ["productID", "warehouseID"])
  @auth(rules: [{ allow: public, operations: [read] }])

{
  productID: ID!
  warehouseID: ID!
  inventoryAmount: Int!
}
